// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file State_msg.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "State_msg.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




State_msg::State_msg()
{
}

State_msg::~State_msg()
{
}

State_msg::State_msg(
        const State_msg& x)
{
    m_state_driver = x.m_state_driver;
    m_state_mes = x.m_state_mes;
    m_state_error = x.m_state_error;
}

State_msg::State_msg(
        State_msg&& x) noexcept
{
    m_state_driver = x.m_state_driver;
    m_state_mes = x.m_state_mes;
    m_state_error = x.m_state_error;
}

State_msg& State_msg::operator =(
        const State_msg& x)
{

    m_state_driver = x.m_state_driver;
    m_state_mes = x.m_state_mes;
    m_state_error = x.m_state_error;
    return *this;
}

State_msg& State_msg::operator =(
        State_msg&& x) noexcept
{

    m_state_driver = x.m_state_driver;
    m_state_mes = x.m_state_mes;
    m_state_error = x.m_state_error;
    return *this;
}

bool State_msg::operator ==(
        const State_msg& x) const
{
    return (m_state_driver == x.m_state_driver &&
           m_state_mes == x.m_state_mes &&
           m_state_error == x.m_state_error);
}

bool State_msg::operator !=(
        const State_msg& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member state_driver
 * @param _state_driver New value for member state_driver
 */
void State_msg::state_driver(
        uint32_t _state_driver)
{
    m_state_driver = _state_driver;
}

/*!
 * @brief This function returns the value of member state_driver
 * @return Value of member state_driver
 */
uint32_t State_msg::state_driver() const
{
    return m_state_driver;
}

/*!
 * @brief This function returns a reference to member state_driver
 * @return Reference to member state_driver
 */
uint32_t& State_msg::state_driver()
{
    return m_state_driver;
}


/*!
 * @brief This function sets a value in member state_mes
 * @param _state_mes New value for member state_mes
 */
void State_msg::state_mes(
        uint32_t _state_mes)
{
    m_state_mes = _state_mes;
}

/*!
 * @brief This function returns the value of member state_mes
 * @return Value of member state_mes
 */
uint32_t State_msg::state_mes() const
{
    return m_state_mes;
}

/*!
 * @brief This function returns a reference to member state_mes
 * @return Reference to member state_mes
 */
uint32_t& State_msg::state_mes()
{
    return m_state_mes;
}


/*!
 * @brief This function sets a value in member state_error
 * @param _state_error New value for member state_error
 */
void State_msg::state_error(
        uint32_t _state_error)
{
    m_state_error = _state_error;
}

/*!
 * @brief This function returns the value of member state_error
 * @return Value of member state_error
 */
uint32_t State_msg::state_error() const
{
    return m_state_error;
}

/*!
 * @brief This function returns a reference to member state_error
 * @return Reference to member state_error
 */
uint32_t& State_msg::state_error()
{
    return m_state_error;
}


// Include auxiliary functions like for serializing/deserializing.
#include "State_msgCdrAux.ipp"

